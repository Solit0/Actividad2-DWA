CREATE TABLE usuarios (
    usuarioId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rolId INTEGER NOT NULL,
    nombreUsuario VARCHAR(100) NOT NULL UNIQUE,
    clave VARCHAR(255) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100),
    CONSTRAINT fk_rol
        FOREIGN KEY(rolId)
        REFERENCES roles(rolId)
        ON DELETE RESTRICT
);

CREATE TABLE publicaciones (
    publicacionId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuarioId INTEGER NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    descripcion TEXT,
    fechaCreacion TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_usuario
        FOREIGN KEY(usuarioId)
        REFERENCES usuarios(usuarioId)
        ON DELETE CASCADE
);
CREATE TABLE comentarios (
    comentarioId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    publicacionId INTEGER NOT NULL,
    usuarioId INTEGER NOT NULL,
    comentario TEXT NOT NULL,
    fechaCreacion TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_publicacion
        FOREIGN KEY(publicacionId)
        REFERENCES publicaciones(publicacionId)
        ON DELETE CASCADE,
    CONSTRAINT fk_usuario
        FOREIGN KEY(usuarioId)
        REFERENCES usuarios(usuarioId)
        ON DELETE CASCADE
);

-- Tabla para las calificaciones de las publicaciones
CREATE TABLE calificaciones (
    calificacionId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    publicacionId INTEGER NOT NULL,
    usuarioId INTEGER NOT NULL,
    calificacion INTEGER NOT NULL CHECK (calificacion >= 1 AND calificacion <= 5),
    CONSTRAINT fk_publicacion
        FOREIGN KEY(publicacionId)
        REFERENCES publicaciones(publicacionId)
        ON DELETE CASCADE,
    CONSTRAINT fk_usuario
        FOREIGN KEY(usuarioId)
        REFERENCES usuarios(usuarioId)
        ON DELETE CASCADE,
    -- Un usuario solo puede calificar una vez cada publicaciÃ³n
    UNIQUE (publicacionId, usuarioId)
);
INSERT INTO roles (rol) VALUES ('Administrador'), ('Usuario');